<?php

/**
 * @file
 * Provides functions and hook implementations for webform multiple file module.
 */

/**
 * Value for field API indicating a field accepts an unlimited number of values.
 */
define('WEBFORM_MULTIPLE_FILE_CARDINALITY_UNLIMITED', -1);

/**
 * Implements hook_webform_component_info().
 */
function webform_multiple_file_webform_component_info() {
  $components = array();

  webform_component_include('file');

  $components['multiple_file'] = array(
    'label' => t('Multiple file'),
    'description' => t('Multiple file upload support for webform.'),
    'features' => array(
      'conditional' => FALSE,
      'attachment' => TRUE,
    ),
    'file' => 'webform_multiple_file.webform.inc',
  );

  return $components;
}

/**
 * Implements hook_webform_submission_presave().
 *
 * @see webform_webform_submission_presave()
 */
function webform_multiple_file_webform_submission_presave($node, &$submission) {
  $has_file_components = FALSE;
  $new_fids = array();
  $old_fids = array();

  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['type'] == 'multiple_file') {
      $has_file_components = TRUE;
      if (!empty($submission->data[$cid])) {
        foreach ($submission->data[$cid] as $key => $value) {
          if (empty($value)) {
            unset($submission->data[$cid][$key]);
          }
        }
        $new_fids = array_merge($new_fids, $submission->data[$cid]);
      }
    }
  }

  if ($has_file_components) {
    // If we're updating a submission, build a list of previous files.
    if (isset($submission->sid)) {
      drupal_static_reset('webform_get_submission');
      $old_submission = webform_get_submission($node->nid, $submission->sid);

      foreach ($node->webform['components'] as $cid => $component) {
        if ($component['type'] == 'multiple_file') {
          if (!empty($old_submission->data[$cid])) {
            $old_fids = array_merge($old_fids, $old_submission->data[$cid]);
          }
        }
      }
    }

    // Save the list of added or removed files so we can add usage in
    // hook_webform_submission_insert() or _update().
    // Also we should keep $submission->file_usage values from previous hook implementations.
    $deleted_fids =  isset($submission->file_usage['deleted_fids']) ? $submission->file_usage['deleted_fids'] : array();
    $added_fids =  isset($submission->file_usage['added_fids']) ? $submission->file_usage['added_fids'] : array();
    $renameable = isset($submission->file_usage['renameable']) ? $submission->file_usage['renameable'] : array();
    $submission->file_usage = array(
      'deleted_fids' => array_merge($deleted_fids, array_diff($old_fids, $new_fids)),
      'added_fids' =>  array_merge($added_fids, array_diff($new_fids, $old_fids)),
      'renameable' => $renameable,
    );
  }
}

/**
 * Finds same page dependencies for the component.
 *
 * @param object $node
 *   Webform node.
 * @param array $component
 *   A multiple_file component to collect dependencies for.
 *
 * @return array
 *   An array of parents for all dependencies.
 */
function webform_multiple_file_get_same_page_dependencies($node, $component) {
  $conditionals = webform_get_conditional_sorter($node);
  $order = $conditionals->getOrder();
  $rules = array();

  // Map rules based on rgid for easy access.
  foreach ($node->webform['conditionals'] as $rule_group) {
    $rules[$rule_group['rgid']] = $rule_group;
  }

  $dependency_parents = array();
  $dependencies = array();
  $frontier = array($component['cid']);

  do {
    $new_frontier = array();
    foreach ($order[$component['page_num']] as $item) {
      // If the component is a rule target, collect dependencies from the
      // corresponding rule group.
      if (in_array($item['cid'], $frontier)) {
        $new_frontier = array_merge($new_frontier, webform_multiple_file_collect_sources($rules[$item['rgid']]));
      }
    }
    $frontier = array_unique($new_frontier);
    $dependencies = array_merge($dependencies, $frontier);
    // Collect dependencies of dependencies until exhausted.
  } while (!empty($frontier));

  if ($dependencies) {
    foreach ($dependencies as $dependency) {
      $component = $node->webform['components'][$dependency];
      $dependency_parents[] = array_merge(array('submitted'), webform_component_parent_keys($node, $component));
    }

  }

  return $dependency_parents;
}

/**
 * Collect sources from a conditional rule group.
 *
 * @param array $rule_group
 *   A webform conditional rule group.
 *
 * @return array
 *   An array of component ids.
 */
function webform_multiple_file_collect_sources($rule_group) {
  $cids = [];
  foreach ($rule_group['rules'] as $rule) {
    if (isset($rule['source'])) {
      $cids[] = $rule['source'];
    }
  }
  return $cids;
}
